{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst ptBRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mês anterior',\n  nextMonth: 'Próximo mês',\n  // View navigation\n  openPreviousView: 'Abrir próxima seleção',\n  openNextView: 'Abrir seleção anterior',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Seleção de ano está aberta, alternando para seleção de calendário' : 'Seleção de calendários está aberta, alternando para seleção de ano',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Início',\n  end: 'Fim',\n  // Action bar\n  cancelButtonLabel: 'Cancelar',\n  clearButtonLabel: 'Limpar',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Hoje',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? 'Hora não selecionada' : `Selecionado a hora ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} horas`,\n  minutesClockNumberText: minutes => `${minutes} minutos`,\n  secondsClockNumberText: seconds => `${seconds} segundos`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Escolha uma data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Escolha uma hora',\n  // Table labels\n  timeTableLabel: 'escolha uma hora',\n  dateTableLabel: 'escolha uma data'\n};\nexport const ptBR = getPickersLocalization(ptBRPickers);","map":{"version":3,"names":["getPickersLocalization","ptBRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","hours","minutesClockNumberText","minutes","secondsClockNumberText","seconds","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","ptBR"],"sources":["C:/Users/bruno/OneDrive/Área de Trabalho/InvestMoneyBots/InvestMoneyBots/AppSacados/client/node_modules/@mui/x-date-pickers/locales/ptBR.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst ptBRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mês anterior',\n  nextMonth: 'Próximo mês',\n  // View navigation\n  openPreviousView: 'Abrir próxima seleção',\n  openNextView: 'Abrir seleção anterior',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Seleção de ano está aberta, alternando para seleção de calendário' : 'Seleção de calendários está aberta, alternando para seleção de ano',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Início',\n  end: 'Fim',\n  // Action bar\n  cancelButtonLabel: 'Cancelar',\n  clearButtonLabel: 'Limpar',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Hoje',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? 'Hora não selecionada' : `Selecionado a hora ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} horas`,\n  minutesClockNumberText: minutes => `${minutes} minutos`,\n  secondsClockNumberText: seconds => `${seconds} segundos`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Escolha uma data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Escolha uma hora',\n  // Table labels\n  timeTableLabel: 'escolha uma hora',\n  dateTableLabel: 'escolha uma data'\n};\nexport const ptBR = getPickersLocalization(ptBRPickers);"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,gCAAgC;AACvE,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,cAAc;EAC7BC,SAAS,EAAE,aAAa;EACxB;EACAC,gBAAgB,EAAE,uBAAuB;EACzCC,YAAY,EAAE,wBAAwB;EACtCC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAM,GAAG,mEAAmE,GAAG,oEAAoE;EAC1M;EACA;EACAC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,KAAK;EACV;EACAC,iBAAiB,EAAE,UAAU;EAC7BC,gBAAgB,EAAE,QAAQ;EAC1BC,aAAa,EAAE,IAAI;EACnBC,gBAAgB,EAAE,MAAM;EACxB;EACA;EACA;EACA;EACA;EACA;EACAC,cAAc,EAAEA,CAACP,IAAI,EAAEQ,IAAI,EAAEC,OAAO,KAAK,aAAaT,IAAI,KAAKQ,IAAI,KAAK,IAAI,GAAG,sBAAsB,GAAG,sBAAsBC,OAAO,CAACC,MAAM,CAACF,IAAI,EAAE,UAAU,CAAC,EAAE,EAAE;EAClKG,oBAAoB,EAAEC,KAAK,IAAI,GAAGA,KAAK,QAAQ;EAC/CC,sBAAsB,EAAEC,OAAO,IAAI,GAAGA,OAAO,UAAU;EACvDC,sBAAsB,EAAEC,OAAO,IAAI,GAAGA,OAAO,WAAW;EACxD;EACAC,sBAAsB,EAAEA,CAACC,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,GAAG,sCAAsCC,KAAK,CAACT,MAAM,CAACS,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,EAAE,GAAG,kBAAkB;EAC1MI,sBAAsB,EAAEA,CAACJ,QAAQ,EAAEC,KAAK,KAAKD,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,CAAC,GAAG,sCAAsCC,KAAK,CAACT,MAAM,CAACS,KAAK,CAACE,IAAI,CAACH,QAAQ,CAAC,EAAE,UAAU,CAAC,EAAE,GAAG,kBAAkB;EAC1M;EACAK,cAAc,EAAE,kBAAkB;EAClCC,cAAc,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,IAAI,GAAGhC,sBAAsB,CAACC,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}